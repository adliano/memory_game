{"version":3,"sources":["components/NavBarComp/index.js","components/ImageContainer/index.js","components/HeaderComp/index.js","App.js","serviceWorker.js","index.js"],"names":["NavBarComp","props","react_default","a","createElement","Navbar_default","bg","variant","expand","fixed","Brand","href","className","brandName","Toggle","Collapse","Text","text","pills","NavPill","Nav_default","Item","concat","children","PillContainer","ImageContainer","Image","Card_default","style","width","id","onClick","Img","src","HeaderComp","Jumbotron_default","fluid","Container_default","App","state","characters","score","topscore","navbarMsg","reloadGame","fetch","then","response","json","results","_this","setState","catch","err","console","log","OnCardClick","event","elementClicked","target","clicked","updatedCharacters","map","element","index","parseInt","Object","objectSpread","updatedScore","updatedTopScore","Math","max","renderScores","_ref","renderCharacters","_characters","character","image","key","_","shuffle","this","Fragment","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e084c8df.chunk.js","sourcesContent":["import React from 'react'\nimport Navbar from 'react-bootstrap/Navbar'\nimport Nav from 'react-bootstrap/Nav'\n\n// Navbar component\nexport function NavBarComp (props) {\n  return (\n    <Navbar bg='secondary' variant='dark' expand='lg' fixed={props.fixed}>\n      <Navbar.Brand href='/' className='text-light'>\n        <h2>{props.brandName}</h2>\n      </Navbar.Brand>\n      <Navbar.Toggle />\n      <Navbar.Collapse>\n        <Navbar.Text className='mx-auto text-light'>\n          <h2>{props.text}</h2>\n        </Navbar.Text>\n          {props.pills}\n      </Navbar.Collapse>\n    </Navbar>\n  )\n}\n// Navbar Pill used to display scores\nexport function NavPill (props) {\n  return (\n    <Nav.Item className={`text-light p-1 m-1 rounded-pill ${props.bg}`}>\n      <h3 className='px-4'>\n        {props.text}: {props.children}\n      </h3>\n    </Nav.Item>\n  )\n}\n// Container to hold the pills that will be used to display the scores\nexport function PillContainer (props) {\n  return(\n    <Nav variant='pills'>\n      {props.children}\n    </Nav>\n  )\n}\n","import React from 'react'\nimport Card from 'react-bootstrap/Card'\nimport './style.css'\n\nexport function ImageContainer (props) {\n  return <div className='container my-5'>{props.children}</div>\n}\n\nexport function Image (props) {\n  return (\n    // id set for card and image in case user click on card still going to work\n    <Card style={{ width: '25%' }} className='m-3 p-2 bg-secondary' id={props.id} onClick={props.onClick}>\n      <Card.Img variant='top' src={props.src} id={props.id}/>\n    </Card>\n  )\n}\n","import React from 'react'\nimport Jumbotron from 'react-bootstrap/Jumbotron'\nimport Container from 'react-bootstrap/Container'\n\nimport './style.css'\n\nexport default function HeaderComp(props) {\n    return (\n        <Jumbotron fluid className='jumbotron text-light'>\n            <Container className='my-5 py-5 mx-auto' >\n                <h1>Memory Game</h1>\n                <h3>Click on an image to earn points, but don't click on any more than once!</h3>\n            </Container>\n        </Jumbotron>\n    )\n}\n","/* Notes at EOF */\n/**\n * Adriano Alves\n * Jul 6 2019\n * https://clicky-game.netlify.com/\n * https://github.com/gitname/react-gh-pages\n */\nimport React, { Component } from 'react'\nimport './App.css'\nimport { NavBarComp, NavPill, PillContainer } from './components/NavBarComp'\n// import Navbar from 'react-bootstrap/Navbar'\nimport { ImageContainer, Image } from './components/ImageContainer'\nimport HeaderComp from './components/HeaderComp'\n// Lowdash used to shuffle array\nimport _ from 'lodash'\n\nclass App extends Component {\n  /**\n   * State\n   */\n  state = {\n    characters: [],\n    score: 0,\n    topscore: 0,\n    navbarMsg: 'Click an image to begin!'\n  }\n  /**\n   * Reload Game Method\n   * This will reload game when it start and after game over\n   * Fetch used in case need to get data from some database in future\n   */\n  reloadGame = () => {\n    fetch('assets/data/data.json')\n      .then(response => response.json())\n      .then(results => {\n        this.setState({ \n          characters: results,\n          score: 0, \n          navbarMsg: 'You guessed incorrectly!',\n        })\n      })\n      .catch(err => console.log(err))\n  }\n  /**\n   * componentDidMount\n   * This method is called after components where mount\n   */\n  componentDidMount () {\n    this.reloadGame()\n  }\n  /**\n   * OnCardClick()\n   * This will handle the logic when user click on image card\n   */\n  OnCardClick = event => {\n    // Save the instance of the clicked element\n    const elementClicked = event.target\n    // Check\n    // if  card clicked === true reset score to 0 and reload game\n    if (this.state.characters[elementClicked.id].clicked) {\n      // GameOver, Reload Game will reset score\n      this.reloadGame()\n    } else {\n      // User got a point\n      let updatedCharacters = this.state.characters.map((element, index) => {\n        // typeof index Output 'number' and\n        // typeof elementClicked.id Output 'string'\n        // Therefor i used parseInt() to void warning about using `==`\n        if (index === parseInt(elementClicked.id)) {\n          // Using Sprad to give whatever its left from the object\n          return { ...element, clicked: true }\n        } else return { ...element }\n      })\n\n      let updatedScore = this.state.score + 1;\n      let updatedTopScore = Math.max(updatedScore, this.state.topscore)\n\n      this.setState({\n        characters: updatedCharacters,\n        score: updatedScore,\n        topscore: updatedTopScore,\n        navbarMsg: 'You guessed correctly!'\n      })\n    }\n  }\n  /**\n   * renderScores()\n   * This method will render the score and top score\n   */\n  renderScores = ({score, topscore}) => {\n    return(\n      <PillContainer>\n        <NavPill text='Score' bg='bg-success'>{score}</NavPill>\n        <NavPill text='Top Score' bg='bg-primary'>{topscore}</NavPill>\n      </PillContainer>\n    )\n  }\n  /**\n   * renderCharacters()\n   * This method will render images cards\n   */\n  renderCharacters = () => {\n    let _characters = this.state.characters.map((character, index) => (\n      <Image\n        src={character.image}\n        key={index}\n        id={index}\n        onClick={this.OnCardClick}\n      />\n    ))\n\n    // Using Lowdash to Return shuffle Array with <Image/>\n    // https://github.com/lodash/lodash/blob/4ea8c2ec249be046a0f4ae32539d652194caf74f/shuffle.js\n    return _.shuffle(_characters)\n  }\n  /**\n   * Render Page\n   */\n  render () {\n    return (\n      // Using React Fragment <> </>\n      <>\n        <NavBarComp\n          fixed='top'\n          brandName='Memory Game'\n          text={this.state.navbarMsg}\n          pills={this.renderScores(this.state)}\n        />\n        <HeaderComp />\n        <ImageContainer>{this.renderCharacters()}</ImageContainer>\n        <NavBarComp brandName='@Memory Game'/>\n      </>\n    )\n  }\n}\n\nexport default App\n\n/*\n********************* NOTES *********************\nAdding Assets Outside of the Module System\nhttps://facebook.github.io/create-react-app/docs/using-the-public-folder\nIn this approach assets/images/ will be placed at public/ dir and\nwe can use fetch() to access it.\nalso we can use `process.env.PUBLIC_URL`, `window.location` to access\nimages from assets/images/\n\nsample of character json\n{\n    \"image\": \"./assets/images/chewbacca.png\", \"clicked\": false\n}\n*/\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}